Name,Label,Role,Description
SELECT / FROM / WHERE / EXCEPT,Core,"Data Analyst; Data Engineer","Basics of row & column selection and projection; SELECT expressions, aliases, DISTINCT, SELECT * vs explicit columns; FROM sources (tables, views, subqueries); WHERE filtering (predicates, short-circuiting); EXCEPT and REPLACE in SELECT for schema manipulation; LIMIT/TOP; best practices for column selection and performance (avoid SELECT *)."
OPERATORS,Core,"Data Analyst; Data Engineer","Operator categories: arithmetic (+,-,*,/,MOD), comparison (=,<>,<,>,<=,>=), logical (AND, OR, NOT), set operators (IN, NOT IN), pattern (LIKE, ILIKE), regex (REGEXP_CONTAINS); NULL tests (IS NULL, IS NOT NULL); BETWEEN; operator precedence and short-circuit behaviour."
CONSTRAINTS,Core,"Data Engineer","DDL-level constraints and their usage: NOT NULL; UNIQUE-like patterns (enforcing uniqueness with queries); DEFAULT values (options); CHECK constraints basics (where supported/limitations); schema-level validation practices; using constraints with partition/clustering options; caveats & backfill considerations."
SINGLE ROW FUNCTIONS (by category),Core,"Data Analyst; Data Engineer","Conditional: CASE, IF, IFNULL, COALESCE, NULLIF; String: UPPER(), LOWER(), INITCAP(), TRIM/LTRIM/RTRIM, CONCAT/CONCAT_WS, SUBSTR()/SUBSTRING(), LENGTH(), STRPOS(), REPLACE(), SPLIT(), REGEXP_CONTAINS(), REGEXP_EXTRACT(), REGEXP_REPLACE(); Date/Time: CURRENT_DATE(), CURRENT_TIMESTAMP(), DATE(), DATETIME(), TIMESTAMP(), TIME(), DATE_ADD()/DATE_SUB(), DATE_DIFF(), DATE_TRUNC(), EXTRACT(), FORMAT_DATE(), PARSE_DATE(), TIMESTAMP_SECONDS()/TIMESTAMP_MILLIS(); Numeric: CAST()/SAFE_CAST(), ROUND(), CEIL()/CEILING(), FLOOR(), ABS(), POWER(), SQRT(), SAFE_DIVIDE(), MOD(), EXP(), LOG(); JSON/STRUCT/ARRAY helpers: JSON_EXTRACT(), JSON_EXTRACT_SCALAR(), TO_JSON_STRING(), SAFE_JSON_EXTRACT; Conversion: CAST, SAFE_CAST, PARSE_* functions. (List each function as separate Jira tasks.)"
GROUP / AGGREGATE FUNCTIONS,Core,"Data Analyst; Data Engineer","Aggregation basics: SUM, COUNT, COUNTIF, APPROX_COUNT_DISTINCT, AVG, MIN, MAX; Array/Set aggs: ARRAY_AGG(), STRING_AGG(); Statistical: STDDEV_POP, STDDEV_SAMP, VAR_POP, VAR_SAMP, COVAR_POP, CORR; ANY_VALUE(), FIRST_VALUE() as aggregations; GROUP BY rollups: GROUPING SETS, ROLLUP, CUBE (if used/available); HAVING clause."
DDL (Data Definition Language),Core,"Data Engineer; DBA","What DDL is and why: schema & object management. Subtopics: CREATE TABLE (schema, options, PARTITION BY, CLUSTER BY, OPTIONS like expiration, labels); CREATE EXTERNAL TABLE; CREATE VIEW / CREATE OR REPLACE VIEW; CREATE MATERIALIZED VIEW; ALTER TABLE (ADD COLUMN, ALTER COLUMN — types & limitations), RENAME, SET OPTIONS; DROP TABLE, TRUNCATE TABLE; CREATE SCHEMA / datasets; GET_DDL() / SHOW statement usage; security considerations when running DDL; backfill strategy after schema change."
DML (Data Manipulation Language),Core,"Data Engineer; Data Analyst","INSERT INTO (single-row, multi-row, INSERT ... SELECT), UPDATE, DELETE, TRUNCATE (as applicable); limitations & quotas (DML per day limits); partition-aware DML best practices; batching and idempotency; using DML within scripts; rippling effects on downstream tables and audit logging."
JOINS,Core,"Data Engineer; Data Analyst","Join types: INNER, LEFT/LEFT OUTER, RIGHT/RIGHT OUTER, FULL/FULL OUTER, CROSS JOIN; USING vs ON; NATURAL JOIN caution; join deduplication patterns; performance best practices (join on partitioned/clustered keys, filter pushed before join); anti-joins and semi-joins (LEFT JOIN + WHERE IS NULL, EXISTS); join hints and broadcast strategies."
SUBQUERY,Core,"Data Analyst; Data Engineer","Scalar subqueries, correlated subqueries, subqueries in WHERE/SELECT/FROM; derived tables (subquery in FROM), performance impact; rewrite patterns with JOINs or CTEs; EXISTS/IN vs joins; nested depth and optimizer behaviour."
CTE (Common Table Expressions),Core,"Data Analyst; Data Engineer","WITH clause basics; naming, chaining multiple CTEs, materialized CTEs (optimizer dependent), using CTEs for readability and modularity; recursive CTEs (WITH RECURSIVE) — mention if used/limitations; refactoring complex queries into CTE steps for testing/backfilling."
TEMPORARY TABLES,Core,"Data Engineer","CREATE TEMP TABLE / temporary session-scoped tables; use-cases for complex ETL steps / performance; lifecycle and session limits; compare vs persistent staging tables."
VIEWS,Core,"Data Analyst; Data Engineer","CREATE VIEW and CREATE OR REPLACE VIEW; logical abstraction, versioning, parameterized views (if using templating tools like dbt); performance implications (views are saved queries); using authorized views for sharing."
MATERIALIZED VIEWS,Core,"Data Engineer; Analyst","What they are: precomputed results for speed. Subtopics: CREATE MATERIALIZED VIEW; refresh semantics & automatic refresh (limitations); use-cases, constraints (aggregations & deterministic expressions), maintenance and quotas, when to prefer scheduled tables vs materialized views."
QUALIFY,Core,"Data Analyst; Data Engineer","QUALIFY clause use to filter results of window functions (avoid nested subqueries); examples with ROW_NUMBER(), RANK() to dedupe or pick top-N per group; best practices."
INFORMATION_SCHEMA & METADATA,Core,"Data Engineer; Platform Engineer","INFORMATION_SCHEMA views: TABLES, COLUMNS, ROUTINES, JOBS, SCHEMATA, PARTITIONS; querying metadata for lineage, auditing, access control; using INFORMATION_SCHEMA for automation and monitoring queries/jobs."
ARRAYS & STRUCTS (Nested Schema),Core,"Data Engineer; Data Analyst","Nested/repeated schema support: STRUCT (RECORD), ARRAY types; designing nested schemas; advantages for denormalised storage; performance considerations; storing JSON-like objects (STRUCT & ARRAY best practices)."
UNNEST,Core,"Data Analyst; Data Engineer","UNNEST() to flatten arrays; lateral flattening with CROSS JOIN UNNEST; preserving ordinality with WITH OFFSET; unnesting arrays of structs; best patterns for exploding arrays safely and efficiently."
INDEXES (Search indexes),Core,"Data Engineer; Analyst","Search indexes overview: purpose (accelerate text search & filter queries); creating search indexes, limitations & supported data types; use cases vs full table scan; maintenance & cost considerations; note product edition/limitations."
MERGE (UPSERT),Core,"Data Engineer","MERGE INTO for upsert semantics: MATCH/WHEN MATCHED/WHEN NOT MATCHED; typical idempotent patterns; merge into partitioned tables; conflict handling and performance considerations; using staging tables + MERGE."
ANALYTICAL / WINDOW FUNCTIONS,Core,"Data Analyst; Data Engineer","Window function list: ROW_NUMBER(), RANK(), DENSE_RANK(), NTILE(), LAG(), LEAD(), FIRST_VALUE(), LAST_VALUE(), SUM() OVER, AVG() OVER, COUNT() OVER; OVER clause components: PARTITION BY, ORDER BY; Window framing: ROWS/RANGE BETWEEN, PRECEDING/FOLLOWING; examples (running totals, moving averages, sessionization)."
PROCEDURES (Stored Procedures),Intermediate,"Data Engineer","CREATE PROCEDURE, CALL; parameters (IN/OUT), return patterns (via result sets), modularizing ETL logic; using procedures for reusable workflows; best practices for idempotency and error propagation; integration with scheduling/orchestration tools (Cloud Composer, Workflows)."
UDFs (User-Defined Functions),Intermediate,"Data Engineer; Data Scientist","SQL UDFs and JavaScript UDFs; CREATE FUNCTION persistent vs temporary; performance considerations; common use cases (string parsing, custom calculations); security considerations for remote code; testing and versioning of UDFs."
TEMPORARY FUNCTIONS,Intermediate,"Data Analyst; Data Engineer","CREATE TEMP FUNCTION for query-scoped logic; advantages for single-query encapsulation; conversion between temp and persistent UDFs; examples."
SCRIPTING (BigQuery Scripts),Intermediate,"Data Engineer","Multi-statement scripts: DECLARE, SET, IF/ELSE, FOR loops, WHILE, EXECUTE IMMEDIATE; control flow for ETL orchestration; statement-level variables; transaction control where applicable; scripting best practices and error handling patterns."
ERROR HANDLING & EXCEPTIONS,Intermediate,"Data Engineer","BEGIN...EXCEPTION...END patterns in scripts/procedures; use of TRY/SAFE_ functions (SAFE_CAST, SAFE_DIVIDE) for graceful failure; logging and alerting on script failures; retries and idempotency design."
FEDERATED / EXTERNAL QUERIES,Intermediate,"Data Engineer; Integration Engineer","Querying external sources without ingestion: Cloud Storage (CSV/Parquet/Avro/ORC), Google Sheets, Cloud SQL (federated), Bigtable; creating external tables; performance implications; connectors & security/auth setup; cost trade-offs."
REMOTE FUNCTIONS & TABLE FUNCTIONS,Intermediate,"Data Engineer","Remote functions to call external services (Cloud Functions/Cloud Run endpoints) from SQL; table-valued functions (TABLE FUNCTION) for reusable table-producing logic; use cases and security considerations."
BIGLAKE / EXTERNAL TABLE FORMATS,Intermediate,"Data Engineer","BigLake and external table features for unified access to object store data; Delta / Iceberg / Parquet / Avro integration; fine-grained access & cataloging; read/write semantics and metadata handling."
PIVOT / UNPIVOT,Intermediate,"Data Analyst","Reshaping queries: PIVOT and UNPIVOT patterns (manual & SQL helper functions); use cases for wide-to-long and long-to-wide transformations; performance notes."
WINDOW FRAMING (Advanced usage),Intermediate,"Data Analyst; Data Engineer","Detailed framing options: RANGE vs ROWS semantics; GROUPS; performance implications when ordering by non-unique keys; using framing for moving aggregates and percentiles."
PARTITIONING (detailed),Core,"Data Engineer","Partitioning types: ingestion-time partitioning (_PARTITIONTIME), partition by DATE/TIMESTAMP/INTEGER RANGE; partition expiration; partition pruning and best practices; partitioned DML considerations; backfill strategies; using pseudo-columns and partition decorators."
CLUSTERING (detailed),Core,"Data Engineer","CLUSTER BY expression list; clustering vs partitioning differences; choose clustering columns (high cardinality considerations), reorder data & maintenance; how clustering improves query pruning and ordering; cluster recommender usage."
STORAGE & TABLE OPTIMIZATION,Intermediate,"Data Engineer","Best practices: denormalization vs normalization, column types & compression, partitioning+clustering patterns, table sharding (legacy—avoid), minimizing scanned bytes; materialized views / cached results; cost optimization patterns."
PERFORMANCE TUNING & SLOTS,Advanced,"Data Engineer; Platform Engineer","Query performance analysis: EXPLAIN / Query plan; dry runs and bytes billed estimation; slot allocation & reservations; slot auto-scaling basics; BI Engine for dashboards; caching strategies and caching limits; best practices to reduce scan bytes."
MONITORING, AUDIT & LINEAGE,Advanced,"Data Engineer; Platform/Compliance","Use INFORMATION_SCHEMA and Cloud Logging (Audit logs) to monitor jobs, query history, cost; lineage via scheduled queries, job metadata and third-party tools; alerting for failed jobs and cost anomalies; retention & compliance practices."
STREAMING INSERTS & REAL-TIME,Advanced,"Data Engineer","Streaming inserts (tabledata.insertAll), streaming buffer behavior, deduplication strategies (insertId), latency vs cost tradeoffs; best practices for high-throughput ingestion; monitoring stream failures."
TABLE TIME TRAVEL & SNAPSHOTS (Decorators),Advanced,"Data Engineer","Table decorators and time travel: using `table@<timestamp>` or `FOR SYSTEM_TIME AS OF` for point-in-time queries; snapshot/restore patterns; retention windows and limits; disaster recovery strategies."
SCHEDULED QUERIES & MATERIALIZED TABLES,Advanced,"Data Engineer; Analytics Engineer","Scheduled queries to build persisted derived tables; comparing scheduled tables vs materialized views; orchestration with Workflows/Composer; incremental refresh patterns, backfills and partition maintenance."
BIGQUERY ML (BQML),Advanced,"Data Scientist; Data Engineer","CREATE MODEL workflows: linear/regression/classification, kmeans, ARIMA/auto-ARIMA (time-series), XGBoost (if available), model evaluation (ML.EVALUATE), ML.PREDICT; feature engineering in SQL; model export/import; training costs and prediction orchestration."
VERTEX AI & ML INTEGRATION,Advanced,"Data Scientist; ML Engineer","Exporting BigQuery data to Vertex AI; training/fine-tuning with Vertex; using BigQuery as a feature store; online prediction integration; model deployment considerations."
OPEN TABLE FORMATS (Delta / Iceberg),Advanced,"Data Engineer","Working with Delta Lake and Apache Iceberg via BigLake / external tables: create external tables over these formats; pros/cons; transaction semantics and metadata handling; read/write patterns and compatibility caveats."
SECURITY: AUTHORIZED VIEWS,ROW & COLUMN LEVEL,Advanced,"Security Engineer; Data Engineer","Authorized views to share filtered/aggregated data across projects; Row-level security (ROW ACCESS POLICIES) – create/attach policies; Column-level security with Data Catalog policy tags; IAM best practices for datasets/tables/routines; auditing access changes."
REMOTE / CONNECTOR INTEGRATION,Intermediate,"Integration Engineer; Data Engineer","Connectors: BigQuery Data Transfer Service (SaaS connectors), Cloud Dataflow, Cloud Composer/Workflows integration; connector auth and scheduling; CDC patterns and orchestration best practices."
ERROR / COST GOVERNANCE,Advanced,"Platform Engineer; Data Engineer","Quotas & limits: API quotas, DML limits, concurrent slots; cost control patterns (table-level quotas, reservations); dry runs & query validators; query cost alerts and budget monitoring."
DEVELOPMENT WORKFLOW & TESTING,Intermediate,"Data Engineer; Analytics Engineer","Local testing patterns, using emulators/sandbox projects, versioning SQL (git), CI pipelines for SQL (linters, unit tests), using dbt or other EL tools for modular SQL & deployments."
DOCS & TOOLING (DBT/INFRA),Intermediate,"Analytics Engineer; Data Engineer","dbt/terraform automation for BigQuery objects, schema migration patterns (CHANGE DATA), testing & documentation automation; recommended repository structure; infra as code for datasets, IAM, and scheduled queries."
